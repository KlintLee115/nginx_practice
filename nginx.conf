events {
    worker_connections 1024;
}

http {

    lua_shared_dict request_counts 1m;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"' '"$upstream_addr"';

    access_log /dev/stdout main;

    error_log /dev/stderr warn;

    upstream backend {
        # Define the backend servers
        server backend1:3000;
        server backend2:3000;
    }

    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m max_size=1g inactive=30d use_temp_path=off;

    server {
        listen 80;

        # Accept any domain or IP address
        server_name _;

        location / {
            
            # Try to serve from cache
            proxy_cache my_cache;
            proxy_cache_valid 200 1h;
            proxy_cache_key "$request_uri";
            
            # Check if the data is cached, if yes, serve it directly
            try_files $uri @check_request_count;
        }
        
        location @check_request_count {
            access_by_lua_block {
                local uri = ngx.var.uri
                local dict = ngx.shared.request_counts
                local count = dict:get(uri) or 0

                -- Increment request count
                if count == 0 then
                    dict:set(uri, 1)
                    count = 1
                else
                    dict:incr(uri, 1)
                end

                ngx.log(ngx.ERR, "Request count for ", uri, ": ", count)

                -- If request count is 200 or more, set caching header
                if count >= 3 then
                    ngx.header["X-Cache"] = "YES"
                    ngx.exec("@cache_and_serve")
                else
                    ngx.exec("@serve_without_cache")
                end
            }
        }

        location @cache_and_serve {
            # Allow caching and pass the request to the backend
            proxy_cache_bypass 0;  # Allow caching
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location @serve_without_cache {
            # Bypass caching and serve the response directly from the backend
            proxy_cache_bypass 1;  # Bypass caching
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}